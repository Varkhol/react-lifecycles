{"version":3,"sources":["components/timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","timer","autoplay","disabled","progress","getInitialState","updateTimerValue","e","setState","target","value","clearInterval","timerInterval","startTimer","setInterval","remaining","remainingTime","stopTimer","this","className","onChange","onClick","style","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAGqBA,G,kNACjBC,MAAQ,CACJC,MAAO,GACPC,UAAU,EACVC,UAAU,EACVC,SAAU,K,EAGdC,gBAAkB,WACd,MAAO,CACLJ,MAAO,EAAKK,iBACZJ,UAAU,EACVC,UAAU,EACVC,SAAU,M,EAIhBE,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CACZP,MAAOM,EAAEE,OAAOC,S,EAItBT,MAAQ,WACJ,EAAKO,SAAS,CACVP,MAAO,EAAKD,MAAMC,MAAQ,EAC1BE,UAAU,IAEV,EAAKH,MAAMC,MAAQ,GACnBU,cAAc,EAAKC,gB,EAgB3BC,WAAa,WACT,EAAKD,cAAgBE,YAAY,EAAKb,MAAO,KAC7C,EAAKc,UAAYD,aAAY,WACzB,EAAKE,cAAc,EAAKhB,MAAMI,SAAS,EAAKJ,MAAMC,SACnD,M,EAGPgB,UAAY,WACRN,cAAc,EAAKC,eACnBD,cAAc,EAAKI,WACnB,EAAKP,SAAS,CACVL,UAAU,K,4DAvBJO,GACVQ,KAAKV,SAAS,CACVJ,SAAUc,KAAKlB,MAAMI,SAAWM,M,0CAKhCQ,KAAKlB,MAAME,UACXgB,KAAKL,e,+BAmBH,IAAD,EACqBK,KAAKlB,MAAxBC,EADF,EACEA,MAAOE,EADT,EACSA,SACd,OACG,yBAAKgB,UAAU,mBACV,yBAAKA,UAAU,cACX,2BAAOA,UAAU,eAAjB,qBACA,2BAAOA,UAAU,cAAcC,SAAUF,KAAKZ,oBAElD,yBAAKa,UAAU,WACX,4BAAQA,UAAU,QAAQhB,SAAUA,EAAUkB,QAASH,KAAKL,YAA5D,SACA,4BAAQM,UAAU,OAAOhB,UAAWA,EAAUkB,QAASH,KAAKD,WAA5D,SAEJ,yBAAKE,UAAU,sBACX,yBAAKA,UAAU,eAAeG,MAAO,CAAEC,MAAM,GAAD,OAAKL,KAAKlB,MAAMI,SAAhB,OAAgCH,EAA5E,c,GAzEeuB,cCOpBC,MANf,WACE,OACM,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eb4bcf58.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './timer.css';\r\n\r\nexport default class Timer extends Component {\r\n    state = {\r\n        timer: 30,\r\n        autoplay: false,\r\n        disabled: false,\r\n        progress: 100\r\n    }\r\n\r\n    getInitialState = () => {\r\n        return {\r\n          timer: this.updateTimerValue,\r\n          autoplay: false,\r\n          disabled: false,\r\n          progress: 100\r\n        };\r\n      }\r\n\r\n    updateTimerValue = (e) => {\r\n        this.setState({\r\n          timer: e.target.value\r\n        });\r\n    }\r\n\r\n    timer = () => {\r\n        this.setState({\r\n            timer: this.state.timer - 1,\r\n            disabled: true\r\n        });\r\n        if (this.state.timer < 1) {\r\n            clearInterval(this.timerInterval);\r\n        } \r\n    }\r\n\r\n    remainingTime(value) {\r\n        this.setState({\r\n            progress: this.state.progress - value \r\n        })\r\n    }\r\n\r\n    componentDidMount() { \r\n        if (this.state.autoplay) {\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    startTimer = () => {\r\n        this.timerInterval = setInterval(this.timer, 1000);\r\n        this.remaining = setInterval(() => {\r\n            this.remainingTime(this.state.progress/this.state.timer)\r\n        }, 1000)\r\n    }\r\n\r\n    stopTimer = () => {\r\n        clearInterval(this.timerInterval);\r\n        clearInterval(this.remaining);\r\n        this.setState({\r\n            disabled: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {timer, disabled} = this.state;\r\n        return (\r\n           <div className=\"timer-container\">\r\n                <div className=\"time-input\">\r\n                    <label className=\"input-label\">Initial time, sec</label>\r\n                    <input className=\"input-field\" onChange={this.updateTimerValue}></input>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button className=\"start\" disabled={disabled} onClick={this.startTimer}>Start</button>\r\n                    <button className=\"stop\" disabled={!disabled} onClick={this.stopTimer}>Stop</button>\r\n                </div>\r\n                <div className=\"progress-container\">\r\n                    <div className=\"progress-bar\" style={{ width: `${this.state.progress}%` }}>{timer} sec</div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Timer from './components/timer/Timer';\n\nfunction App() {\n  return (\n        <Timer/>\n)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}